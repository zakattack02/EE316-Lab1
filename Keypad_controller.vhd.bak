library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

Entity Keypad_controller is
	Port(
	row   : in std_logic_vector(4 DOWNTO 0); 
	row1	: in std_logic;
	row2	: in std_logic;
	row3	: in std_logic;
	row4	: in std_logic;
	row5	: in std_logic;
	iClk                    : in std_logic;
 	clk_en_5ms              : in std_logic;
	DATA_out                : out std_logic_vector(3 downto 0);
	pulse_5ms               : out std_logic;
	pulse_20ns              : out std_logic;
	pulse_520ns             : out std_logic;
   col1 							: out std_logic:='0';
	col2 							: out std_logic:='1';
	col3           			: out std_logic:='1';
	col4                    : out std_logic:='1';
	statecontrol            : out std_logic_vector(1 downto 0);
	control_state           : out std_logic_vector(1 downto 0);
	col : out std_logic_vector(3 downto 0)
	);
	
end Keypad_controller;

Architecture behavior of Keypad_controller is

	component clock_en is
		GENERIC (
			CONSTANT cnt_max : integer := 250000);      
		port(	
			clock:		in std_logic;	 
			clk_en: 		out std_logic);
	end component;

	component keypad_lut is
    Port (
			iClk   : in std_logic;
			state  : in std_logic_vector (1 downto 0);
			DATA_in : in STD_LOGIC_VECTOR (4 downto 0);
         hex    : out STD_LOGIC_VECTOR(3 downto 0);
			statecontrol     : out std_logic_vector(1 downto 0));
	end component;
	
	component btn_debounce_toggle is
	GENERIC (
		CONSTANT CNTR_MAX : std_logic_vector(15 downto 0) := X"0001");  
		Port ( 
				 BTN_I 	 : in  STD_LOGIC;
             CLK 		 : in  STD_LOGIC;
             BTN_O 	 : out  STD_LOGIC;
             TOGGLE_O : out  STD_LOGIC;
		       PULSE_O  : out STD_LOGIC);
	end component;
	
	CONSTANT cnt_max : integer := 250000;
	constant CNTR_MAX : std_logic_vector(15 downto 0) := X"0001";
	type state_type is (St_A, St_B, St_C, St_D);
	signal next_state : state_type;
   signal kp : std_logic;
	signal state : std_logic_vector(1 downto 0) :="00";
	signal statecontrol_lut    : std_logic_vector(1 downto 0) :="00";
	signal DATA_in : std_logic_vector(4 downto 0);
	
begin
	
	statecontrol <= statecontrol_lut;
	control_state <= state;
	process(iClk, kp)
	begin 
	
	--kp <= not (row1 and row2 and row3 and row4 and row5);
	kp <= not (row(0) and row(1) and row(2) and row(3) and row(4)); 
	
		case next_state is
			when St_A =>
				if kp <= '0' then
					next_state <= St_B;
					col(1) <= '0';
					col(0) <= '1';
					state <= "01";
				else
					DATA_in <= (row(0) & row(1) & row(2) & row(3) & row(4));--row5 & row4 & row3 & row2 & row1; 
					next_state <= St_A;
				end if;
			when St_B =>
				if kp <= '0' then
					next_state <= St_C;
					col(2) <= '0';
					col(0) <= '1';
					state <= "10";
				else
					DATA_in <= (row(0) & row(1) & row(2) & row(3) & row(4));
					next_state <= St_B;
				end if;
			when St_C =>
				if kp <= '0' then
					next_state <= St_D;
					col(3) <= '0';
					col(2) <= '1';
					state <= "11";
				else
					DATA_in <= (row(0) & row(1) & row(2) & row(3) & row(4));
					next_state <= St_C;
				end if;
			when St_D =>
				if kp <= '0' then
					next_state <= St_A;
					col(0) <= '0';
					col(3) <= '1';
					state <= "00";
				else
					DATA_in <= (row(0) & row(1) & row(2) & row(3) & row(4));
					next_state <= St_D;
				end if;
		end case;
	end process;	
	
	
		Inst_bdt_20ns: btn_debounce_toggle
		GENERIC MAP (CNTR_MAX => CNTR_MAX )
		Port Map( 
				 BTN_I => kp, 	 
             CLK => iClk,		 
             BTN_O => open,	 
             TOGGLE_O => open,
		       PULSE_O => pulse_20ns);
				 
	Inst_bdt_5ms: btn_debounce_toggle
		GENERIC MAP(CNTR_MAX => CNTR_MAX)  
		Port Map( 
				 BTN_I => kp, 	 
             CLK => clk_en_5ms,		 
             BTN_O => open,	 
             TOGGLE_O => open,
		       PULSE_O => pulse_5ms);
				 
				 
	Inst_lut: keypad_lut 
    Port map(
			iClk => iClk,
			state => state,
			DATA_in => DATA_in,
         hex  => DATA_out,
			statecontrol   => statecontrol_lut);
			
			
	Inst_clk: clock_en 
		GENERIC map ( cnt_max => cnt_max)      
		port map(	
			clock => iClk,		
			clk_en => pulse_520ns);


end behavior;
